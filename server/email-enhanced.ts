import sgMail from '@sendgrid/mail';

// Configuration SendGrid am√©lior√©e avec validation
class EmailServiceEnhanced {
  private fromEmail: string;
  private fromName: string;
  private appUrl: string;
  private isConfigured: boolean = false;
  private apiKey: string;

  constructor() {
    this.apiKey = process.env.SENDGRID_API_KEY || '';
    this.fromEmail = process.env.SENDGRID_FROM_EMAIL || 'noreply@TeamMoves.com';
    this.fromName = process.env.SENDGRID_FROM_NAME || 'TeamMoves';
    this.appUrl = process.env.APP_URL || 'https://teammove.fr';
    
    this.initializeService();
  }

  private initializeService() {
    if (!this.apiKey) {
      console.error('‚ùå SENDGRID_API_KEY is not configured');
      return;
    }

    if (!this.apiKey.startsWith('SG.')) {
      console.error('‚ùå Invalid SendGrid API key format');
      return;
    }

    try {
      sgMail.setApiKey(this.apiKey);
      this.isConfigured = true;
      console.log('‚úÖ SendGrid service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize SendGrid:', error);
      this.isConfigured = false;
    }
  }

  // Validation de l'API key SendGrid
  async validateApiKey(): Promise<boolean> {
    if (!this.isConfigured) {
      return false;
    }

    try {
      // Test avec un petit appel √† l'API SendGrid
      const testMsg = {
        to: this.fromEmail,
        from: this.fromEmail,
        subject: 'API Key Validation Test',
        text: 'This is a test to validate the API key',
        html: '<p>This is a test to validate the API key</p>',
        mail_settings: {
          sandbox_mode: { enable: true } // Mode sandbox pour ne pas envoyer r√©ellement
        }
      };

      await sgMail.send(testMsg);
      console.log('‚úÖ SendGrid API key is valid');
      return true;
    } catch (error: any) {
      console.error('‚ùå SendGrid API key validation failed:', error?.response?.body || error.message);
      
      if (error.code === 401) {
        console.error('üîë API Key is invalid or expired. Please check your SendGrid configuration.');
      } else if (error.code === 403) {
        console.error('üîë API Key does not have sufficient permissions.');
      }
      
      return false;
    }
  }

  // Envoi d'email s√©curis√© avec retry
  async sendEmail(data: {
    to: string;
    toName?: string;
    subject: string;
    html: string;
    text: string;
    fromEmail?: string;
    fromName?: string;
  }, retries: number = 2): Promise<boolean> {
    if (!this.isConfigured) {
      console.error('‚ùå SendGrid not configured properly');
      return false;
    }

    // Validation des donn√©es
    if (!data.to || !data.subject || (!data.html && !data.text)) {
      console.error('‚ùå Missing required email data');
      return false;
    }

    const msg = {
      to: {
        email: data.to,
        name: data.toName || data.to
      },
      from: {
        email: data.fromEmail || this.fromEmail,
        name: data.fromName || this.fromName
      },
      subject: data.subject,
      text: data.text,
      html: data.html,
    };

    for (let attempt = 0; attempt <= retries; attempt++) {
      try {
        await sgMail.send(msg);
        console.log(`‚úÖ Email sent successfully to: ${data.to}`);
        return true;
      } catch (error: any) {
        const errorInfo = error?.response?.body?.errors?.[0] || error;
        
        console.error(`‚ùå Attempt ${attempt + 1} failed to send email to ${data.to}:`, {
          code: error.code,
          message: errorInfo.message || error.message,
          field: errorInfo.field || 'unknown'
        });

        // Si c'est une erreur d'authentification, ne pas retry
        if (error.code === 401 || error.code === 403) {
          console.error('üîë Authentication error - stopping retries');
          break;
        }

        // Si c'est le dernier essai, arr√™ter
        if (attempt === retries) {
          break;
        }

        // Attendre avant retry (exponential backoff)
        const delay = Math.pow(2, attempt) * 1000;
        console.log(`‚è≥ Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    return false;
  }

  // Version am√©lior√©e de l'envoi group√© d'invitations
  async sendBulkEventInvitations(
    emails: string[],
    eventName: string,
    organizationName: string,
    eventDate: Date,
    eventLink: string,
    meetingPoint?: string,
    destination?: string,
    sport?: string,
    duration?: string,
    organizerContactName?: string,
    organizerEmail?: string
  ): Promise<{ success: number; failed: string[] }> {
    console.log(`üìß Starting bulk email sending for ${emails.length} recipients`);
    
    // V√©rifier d'abord la configuration
    if (!this.isConfigured) {
      console.error('‚ùå SendGrid not configured - all emails will fail');
      return { success: 0, failed: emails };
    }

    // Valider l'API key avant d'essayer d'envoyer
    const isValid = await this.validateApiKey();
    if (!isValid) {
      console.error('‚ùå SendGrid API key is invalid - all emails will fail');
      return { success: 0, failed: emails };
    }

    const results = {
      success: 0,
      failed: [] as string[]
    };

    // Traitement par lots pour √©viter le rate limiting
    const BATCH_SIZE = 5;
    const DELAY_BETWEEN_BATCHES = 1000; // 1 seconde entre les lots

    for (let i = 0; i < emails.length; i += BATCH_SIZE) {
      const batch = emails.slice(i, i + BATCH_SIZE);
      
      console.log(`üì® Processing batch ${Math.floor(i / BATCH_SIZE) + 1} (${batch.length} emails)`);

      const batchPromises = batch.map(async (email) => {
        try {
          const sent = await this.sendEventInvitationWithLink(
            email,
            eventName,
            organizationName,
            eventDate,
            eventLink,
            meetingPoint,
            destination,
            sport,
            duration,
            organizerContactName,
            organizerEmail
          );
          
          if (sent) {
            results.success++;
          } else {
            results.failed.push(email);
          }
        } catch (error) {
          console.error(`‚ùå Failed to send invitation to ${email}:`, error);
          results.failed.push(email);
        }
      });

      // Attendre que tous les emails du lot soient trait√©s
      await Promise.all(batchPromises);

      // D√©lai entre les lots (sauf pour le dernier)
      if (i + BATCH_SIZE < emails.length) {
        await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
      }
    }

    console.log(`üìä Email sending completed: ${results.success} successful, ${results.failed.length} failed`);
    if (results.failed.length > 0) {
      console.log('üìù Failed to send invitations to:', results.failed);
    }

    return results;
  }

  // M√©thode pour tester la configuration
  async testConfiguration(): Promise<{
    isConfigured: boolean;
    apiKeyValid: boolean;
    fromEmailValid: boolean;
    canSendEmails: boolean;
  }> {
    const result = {
      isConfigured: this.isConfigured,
      apiKeyValid: false,
      fromEmailValid: false,
      canSendEmails: false
    };

    if (!this.isConfigured) {
      return result;
    }

    // Test API key
    result.apiKeyValid = await this.validateApiKey();

    // Test from email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    result.fromEmailValid = emailRegex.test(this.fromEmail);

    result.canSendEmails = result.apiKeyValid && result.fromEmailValid;

    return result;
  }

  // R√©utilisation des m√©thodes existantes mais avec la nouvelle logique d'envoi
  async sendEventInvitationWithLink(
    email: string,
    eventName: string,
    organizationName: string,
    eventDate: Date,
    eventLink: string,
    meetingPoint?: string,
    destination?: string,
    sport?: string,
    duration?: string,
    organizerContactName?: string,
    organizerEmail?: string
  ): Promise<boolean> {
    const formattedDate = eventDate.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const formattedTime = eventDate.toLocaleTimeString('fr-FR', {
      hour: '2-digit',
      minute: '2-digit'
    });

    const contactOrganizerUrl = organizerEmail 
      ? `mailto:${organizerEmail}?subject=Question%20√†%20propos%20de%20l'√©v√©nement%20"${encodeURIComponent(eventName)}"` 
      : null;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background-color: #f8f9fa; padding: 30px; border-radius: 8px;">
          <h1 style="color: #333; margin-bottom: 20px; text-align: center;">
            üéØ Vous √™tes invit√© √† un √©v√©nement !
          </h1>
          <div style="background-color: white; padding: 25px; border-radius: 8px; margin-bottom: 20px;">
            <h2 style="color: #007bff; margin-bottom: 15px;">${eventName}</h2>
            <div style="margin-bottom: 20px;">
              <p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>Organis√© par :</strong> ${organizationName}
              </p>
              ${sport ? `<p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>Sport :</strong> ${sport}
              </p>` : ''}
              <p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>Date :</strong> ${formattedDate}
              </p>
              <p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>Heure :</strong> ${formattedTime}
              </p>
              ${duration ? `<p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>Dur√©e :</strong> ${duration}
              </p>` : ''}
              ${meetingPoint ? `<p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>RDV :</strong> ${meetingPoint}
              </p>` : ''}
              ${destination ? `<p style="color: #666; font-size: 16px; margin-bottom: 8px;">
                <strong>Destination :</strong> ${destination}
              </p>` : ''}
            </div>
            <p style="color: #666; font-size: 16px; margin-bottom: 30px;">
              Un nouvel √©v√©nement vient d'√™tre cr√©√© et vous √™tes automatiquement invit√© ! 
              Cliquez sur le lien ci-dessous pour voir tous les d√©tails et confirmer votre participation.
            </p>
            <div style="text-align: center; margin-bottom: 20px;">
              <a href="${eventLink}" style="display: inline-block; background-color: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin-bottom: 10px;">
                Voir l'√©v√©nement et participer
              </a>
            </div>
            ${contactOrganizerUrl ? `
              <div style="text-align: center; border-top: 1px solid #eee; padding-top: 15px;">
                <p style="color: #666; font-size: 14px; margin-bottom: 10px;">
                  Une question ? Contactez l'organisateur
                </p>
                <a href="${contactOrganizerUrl}" style="display: inline-block; background-color: #6c757d; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-size: 14px;">
                  ‚úâÔ∏è Contacter ${organizerContactName || organizationName}
                </a>
              </div>
            ` : ''}
          </div>
          <p style="color: #666; font-size: 12px; text-align: center;">
            Si le bouton ne fonctionne pas, copiez ce lien :<br>
            <a href="${eventLink}" style="color: #007bff;">${eventLink}</a>
          </p>
        </div>
      </div>
    `;

    const text = `
      Vous √™tes invit√© √† un √©v√©nement !
      
      √âv√©nement : ${eventName}
      Organis√© par : ${organizationName}
      ${sport ? `Sport : ${sport}` : ''}
      Date : ${formattedDate}
      Heure : ${formattedTime}
      ${duration ? `Dur√©e : ${duration}` : ''}
      ${meetingPoint ? `RDV : ${meetingPoint}` : ''}
      ${destination ? `Destination : ${destination}` : ''}
      
      Un nouvel √©v√©nement vient d'√™tre cr√©√© et vous √™tes automatiquement invit√© !
      Cliquez sur ce lien pour voir tous les d√©tails et confirmer votre participation :
      
      ${eventLink}
      
      ${organizerEmail ? `Pour toute question, contactez l'organisateur : ${organizerEmail}` : ''}
    `;

    return await this.sendEmail({
      to: email,
      subject: `Nouvel √©v√©nement: ${eventName} - ${organizationName}`,
      html,
      text
    });
  }

  // Send message to participants with reply functionality
  async sendMessageToParticipant(
    participantEmail: string,
    participantName: string,
    messageContent: string,
    eventName: string,
    organizationName: string,
    organizerName: string,
    replyToken: string
  ): Promise<{ success: boolean; error?: string }> {
    if (!this.isConfigured) {
      return { success: false, error: 'Email service not configured' };
    }

    const replyUrl = `${this.appUrl}/api/messages/reply/${replyToken}`;
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: white;">
        <div style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; padding: 30px; text-align: center;">
          <h1 style="margin: 0; font-size: 28px; font-weight: bold;">üí¨ Nouveau Message</h1>
        </div>
        <div style="padding: 30px;">
          <p style="color: #333; font-size: 18px; margin-bottom: 20px;">
            Bonjour ${participantName},
          </p>
          <p style="color: #666; font-size: 16px; margin-bottom: 20px;">
            Vous avez re√ßu un nouveau message de <strong>${organizerName}</strong> concernant l'√©v√©nement <strong>${eventName}</strong> :
          </p>
          
          <div style="background-color: #f8f9fa; border-left: 4px solid #007bff; padding: 20px; margin: 20px 0; border-radius: 4px;">
            <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
              ${messageContent.replace(/\n/g, '<br>')}
            </p>
          </div>
          
          <div style="background-color: #e8f4ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <p style="color: #0056b3; font-size: 16px; margin-bottom: 15px; font-weight: bold;">
              üí° Vous pouvez r√©pondre directement par email !
            </p>
            <p style="color: #666; font-size: 14px; margin-bottom: 10px;">
              R√©pondez simplement √† cet email et votre message sera automatiquement transmis √† l'organisateur.
            </p>
            <p style="color: #666; font-size: 12px; font-style: italic;">
              Organis√© par ${organizationName}
            </p>
          </div>
          
          <p style="color: #999; font-size: 12px; text-align: center; margin-top: 30px;">
            Ce message concerne l'√©v√©nement "${eventName}"<br>
            Organis√© par ${organizationName}
          </p>
        </div>
      </div>
    `;

    const text = `
      Nouveau Message - ${eventName}
      
      Bonjour ${participantName},
      
      Vous avez re√ßu un nouveau message de ${organizerName} concernant l'√©v√©nement "${eventName}" :
      
      "${messageContent}"
      
      Vous pouvez r√©pondre directement √† cet email et votre message sera automatiquement transmis √† l'organisateur.
      
      Organis√© par ${organizationName}
    `;

    return await this.sendEmail({
      to: participantEmail,
      subject: `Message de ${organizerName} - ${eventName}`,
      html,
      text,
      replyTo: `${this.fromEmail}+${replyToken}@reply.TeamMove.com`
    });
  }

  // Send reply notification to organizer
  async sendReplyNotificationToOrganizer(
    organizerEmail: string,
    organizerName: string,
    participantName: string,
    replyContent: string,
    eventName: string
  ): Promise<{ success: boolean; error?: string }> {
    if (!this.isConfigured) {
      return { success: false, error: 'Email service not configured' };
    }

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: white;">
        <div style="background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%); color: white; padding: 30px; text-align: center;">
          <h1 style="margin: 0; font-size: 28px; font-weight: bold;">üí¨ Nouvelle R√©ponse</h1>
        </div>
        <div style="padding: 30px;">
          <p style="color: #333; font-size: 18px; margin-bottom: 20px;">
            Bonjour ${organizerName},
          </p>
          <p style="color: #666; font-size: 16px; margin-bottom: 20px;">
            <strong>${participantName}</strong> a r√©pondu √† votre message concernant l'√©v√©nement <strong>${eventName}</strong> :
          </p>
          
          <div style="background-color: #f8f9fa; border-left: 4px solid #28a745; padding: 20px; margin: 20px 0; border-radius: 4px;">
            <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
              ${replyContent.replace(/\n/g, '<br>')}
            </p>
          </div>
          
          <div style="background-color: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="color: #155724; font-size: 14px; margin: 0;">
              <strong>De :</strong> ${participantName}<br>
              <strong>√âv√©nement :</strong> ${eventName}
            </p>
          </div>
          
          <p style="color: #999; font-size: 12px; text-align: center; margin-top: 30px;">
            Vous pouvez r√©pondre directement √† ce participant en r√©pondant √† cet email.
          </p>
        </div>
      </div>
    `;

    const text = `
      Nouvelle R√©ponse - ${eventName}
      
      Bonjour ${organizerName},
      
      ${participantName} a r√©pondu √† votre message concernant l'√©v√©nement "${eventName}" :
      
      "${replyContent}"
      
      Vous pouvez r√©pondre directement √† ce participant en r√©pondant √† cet email.
    `;

    return await this.sendEmail({
      to: organizerEmail,
      subject: `R√©ponse de ${participantName} - ${eventName}`,
      html,
      text
    });
  }

  // Send reminder email to participants
  async sendReminderEmail(
    participantEmail: string,
    participantName: string,
    eventName: string,
    organizationName: string,
    eventDate: Date,
    meetingPoint: string
  ): Promise<{ success: boolean; error?: string }> {
    if (!this.isConfigured) {
      return { success: false, error: 'Email service not configured' };
    }

    const formattedDate = eventDate.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
    const formattedTime = eventDate.toLocaleTimeString('fr-FR', {
      hour: '2-digit',
      minute: '2-digit'
    });

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: white;">
        <div style="background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%); color: #333; padding: 30px; text-align: center;">
          <h1 style="margin: 0; font-size: 28px; font-weight: bold;">‚è∞ Rappel d'√âv√©nement</h1>
        </div>
        <div style="padding: 30px;">
          <p style="color: #333; font-size: 18px; margin-bottom: 20px;">
            Bonjour ${participantName},
          </p>
          <p style="color: #666; font-size: 16px; margin-bottom: 20px;">
            Nous vous rappelons que l'√©v√©nement <strong>${eventName}</strong> approche !
          </p>
          
          <div style="background-color: #fff8e1; border: 2px solid #ffc107; padding: 20px; margin: 20px 0; border-radius: 8px;">
            <h3 style="color: #333; margin-top: 0; margin-bottom: 15px;">üìÖ D√©tails de l'√©v√©nement</h3>
            <p style="color: #666; margin: 8px 0;"><strong>√âv√©nement :</strong> ${eventName}</p>
            <p style="color: #666; margin: 8px 0;"><strong>Date :</strong> ${formattedDate}</p>
            <p style="color: #666; margin: 8px 0;"><strong>Heure :</strong> ${formattedTime}</p>
            <p style="color: #666; margin: 8px 0;"><strong>Rendez-vous :</strong> ${meetingPoint}</p>
            <p style="color: #666; margin: 8px 0;"><strong>Organis√© par :</strong> ${organizationName}</p>
          </div>
          
          <p style="color: #666; font-size: 16px; margin-bottom: 20px;">
            N'oubliez pas de vous pr√©senter √† l'heure au point de rendez-vous. √Ä bient√¥t !
          </p>
          
          <p style="color: #999; font-size: 12px; text-align: center; margin-top: 30px;">
            Ceci est un rappel automatique pour l'√©v√©nement "${eventName}"
          </p>
        </div>
      </div>
    `;

    const text = `
      Rappel d'√âv√©nement - ${eventName}
      
      Bonjour ${participantName},
      
      Nous vous rappelons que l'√©v√©nement "${eventName}" approche !
      
      D√©tails :
      - √âv√©nement : ${eventName}
      - Date : ${formattedDate}
      - Heure : ${formattedTime}
      - Rendez-vous : ${meetingPoint}
      - Organis√© par : ${organizationName}
      
      N'oubliez pas de vous pr√©senter √† l'heure au point de rendez-vous. √Ä bient√¥t !
    `;

    return await this.sendEmail({
      to: participantEmail,
      subject: `Rappel : ${eventName} - ${formattedDate}`,
      html,
      text
    });
  }

  // Send password reset email
  async sendPasswordResetEmail(
    email: string,
    name: string,
    resetToken: string
  ): Promise<{ success: boolean; error?: string }> {
    if (!this.isConfigured) {
      return { success: false, error: 'Email service not configured' };
    }

    const resetLink = `${this.appUrl}/reset-password?token=${resetToken}`;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: white;">
        <div style="background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; padding: 30px; text-align: center;">
          <h1 style="margin: 0; font-size: 28px; font-weight: bold;">üîí R√©initialisation du mot de passe</h1>
        </div>
        <div style="padding: 30px;">
          <p style="color: #333; font-size: 18px; margin-bottom: 20px;">
            Bonjour ${name},
          </p>
          <p style="color: #666; font-size: 16px; margin-bottom: 20px;">
            Vous avez demand√© une r√©initialisation de votre mot de passe. Cliquez sur le lien ci-dessous pour cr√©er un nouveau mot de passe :
          </p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetLink}" style="display: inline-block; background-color: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">
              R√©initialiser mon mot de passe
            </a>
          </div>
          
          <div style="background-color: #fff5f5; border: 1px solid #fecaca; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="color: #b91c1c; font-size: 14px; margin: 0;">
              <strong>‚ö†Ô∏è Important :</strong> Ce lien expirera dans 1 heure. Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email.
            </p>
          </div>
          
          <p style="color: #666; font-size: 12px; text-align: center;">
            Si le bouton ne fonctionne pas, copiez ce lien :<br>
            <a href="${resetLink}" style="color: #007bff;">${resetLink}</a>
          </p>
        </div>
      </div>
    `;

    const text = `
      R√©initialisation du mot de passe
      
      Bonjour ${name},
      
      Vous avez demand√© une r√©initialisation de votre mot de passe. Cliquez sur le lien ci-dessous pour cr√©er un nouveau mot de passe :
      
      ${resetLink}
      
      IMPORTANT : Ce lien expirera dans 1 heure. Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email.
    `;

    return await this.sendEmail({
      to: email,
      subject: 'R√©initialisation de votre mot de passe - TeamMove',
      html,
      text
    });
  }

  // Send custom email with organization branding
  async sendCustomEmail(
    to: string,
    subject: string,
    content: string,
    organization?: any
  ): Promise<{ success: boolean; error?: string }> {
    if (!this.isConfigured) {
      return { success: false, error: 'Email service not configured' };
    }

    const organizationName = organization?.name || 'TeamMove';
    const organizerName = organization ? `${organization.contactFirstName} ${organization.contactLastName}` : 'TeamMove';

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: white;">
        <div style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; padding: 30px; text-align: center;">
          <h1 style="margin: 0; font-size: 28px; font-weight: bold;">üìß ${organizationName}</h1>
        </div>
        <div style="padding: 30px;">
          <div style="background-color: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; line-height: 1.6;">
            ${content.replace(/\n/g, '<br>')}
          </div>
          
          <p style="color: #999; font-size: 12px; text-align: center; margin-top: 30px;">
            Message envoy√© par ${organizerName} via TeamMove
          </p>
        </div>
      </div>
    `;

    const text = `
      ${subject}
      
      ${content}
      
      ---
      Message envoy√© par ${organizerName} via TeamMove
    `;

    return await this.sendEmail({
      to,
      subject,
      html,
      text
    });
  }

  // Diagnostic complet du service email
  async diagnoseService(): Promise<string> {
    const config = await this.testConfiguration();
    
    let report = 'üìß SendGrid Service Diagnostic Report\n';
    report += '=====================================\n\n';
    
    report += `üîß Configuration Status: ${config.isConfigured ? '‚úÖ OK' : '‚ùå NOT CONFIGURED'}\n`;
    report += `üîë API Key Status: ${config.apiKeyValid ? '‚úÖ VALID' : '‚ùå INVALID'}\n`;
    report += `üì¨ From Email Status: ${config.fromEmailValid ? '‚úÖ VALID' : '‚ùå INVALID'}\n`;
    report += `üì§ Can Send Emails: ${config.canSendEmails ? '‚úÖ YES' : '‚ùå NO'}\n\n`;
    
    if (!config.isConfigured) {
      report += '‚ùó Issues Found:\n';
      report += `   - SENDGRID_API_KEY: ${this.apiKey ? 'SET' : 'MISSING'}\n`;
      report += `   - SENDGRID_FROM_EMAIL: ${this.fromEmail}\n`;
      report += `   - SENDGRID_FROM_NAME: ${this.fromName}\n\n`;
    }
    
    if (!config.apiKeyValid) {
      report += 'üîß Recommended Actions:\n';
      report += '   1. Check your SendGrid API key in environment variables\n';
      report += '   2. Ensure the API key starts with "SG."\n';
      report += '   3. Verify the API key has "Mail Send" permissions in SendGrid dashboard\n';
      report += '   4. Check if the API key is not expired\n\n';
    }
    
    return report;
  }

  // Broadcast message to all participants
  async sendBroadcastMessage(
    participantEmail: string,
    participantName: string,
    eventName: string,
    organizationName: string,
    messageContent: string,
    organizerName: string,
    eventId: string
  ): Promise<boolean> {
    if (!this.isConfigured) {
      console.error('‚ùå EmailService not configured for broadcast message');
      return false;
    }

    try {
      const replyUrl = `${this.appUrl}/events/${eventId}#reply`;
      
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="fr">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Message de l'organisateur - ${eventName}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
            .message-box { background: white; padding: 20px; border-left: 4px solid #667eea; margin: 20px 0; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
            .event-info { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
            .cta-button { display: inline-block; background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üì¢ Message de l'organisateur</h1>
              <p>Nouveau message concernant votre √©v√©nement</p>
            </div>
            
            <div class="content">
              <p>Bonjour <strong>${participantName}</strong>,</p>
              
              <p>Vous avez re√ßu un nouveau message de <strong>${organizerName}</strong> concernant l'√©v√©nement :</p>
              
              <div class="event-info">
                <h3>üèÉ ${eventName}</h3>
                <p><strong>Organisation:</strong> ${organizationName}</p>
              </div>

              <div class="message-box">
                <h4>üí¨ Message :</h4>
                <p>${messageContent.replace(/\n/g, '<br>')}</p>
                <p><em>‚Äî ${organizerName}, ${organizationName}</em></p>
              </div>

              <div style="text-align: center; margin: 30px 0;">
                <a href="${replyUrl}" class="cta-button">
                  ‚Ü©Ô∏è R√©pondre au message
                </a>
              </div>

              <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <p><strong>üí° Comment r√©pondre :</strong></p>
                <p>Cliquez sur le bouton "R√©pondre au message" ci-dessus pour acc√©der √† l'interface de r√©ponse. Votre r√©ponse sera directement transmise √† l'organisateur.</p>
              </div>

              <p>Si vous avez des questions, n'h√©sitez pas √† contacter l'organisateur.</p>
              
              <p>Sportivement,<br><strong>L'√©quipe TeamMove</strong></p>
            </div>
            
            <div class="footer">
              <p>Cet email a √©t√© envoy√© par ${organizationName} via TeamMove</p>
              <p>Pour plus d'informations : <a href="${this.appUrl}">${this.appUrl}</a></p>
            </div>
          </div>
        </body>
        </html>
      `;

      const textContent = `
Message de l'organisateur - ${eventName}

Bonjour ${participantName},

Vous avez re√ßu un nouveau message de ${organizerName} concernant l'√©v√©nement "${eventName}" (${organizationName}).

Message :
${messageContent}

‚Äî ${organizerName}, ${organizationName}

Pour r√©pondre √† ce message, visitez : ${replyUrl}

Sportivement,
L'√©quipe TeamMove

${this.appUrl}
      `;

      const msg = {
        to: participantEmail,
        from: { email: this.fromEmail, name: this.fromName },
        replyTo: { email: this.fromEmail, name: organizationName },
        subject: `üì¢ Message de ${organizationName} - ${eventName}`,
        text: textContent.trim(),
        html: htmlContent,
        trackingSettings: {
          clickTracking: { enable: true },
          openTracking: { enable: true },
        },
        categories: ['broadcast_message', 'event_communication'],
      };

      await sgMail.send(msg);
      console.log(`‚úÖ Broadcast message sent to ${participantEmail} for event ${eventName}`);
      return true;

    } catch (error) {
      console.error(`‚ùå Failed to send broadcast message to ${participantEmail}:`, error);
      return false;
    }
  }

  // Broadcast message with reply button for external replies
  async sendBroadcastMessageWithReplyButton(
    participantEmail: string,
    participantName: string,
    eventName: string,
    organizationName: string,
    messageContent: string,
    organizerName: string,
    eventId: string,
    replyToken: string
  ): Promise<boolean> {
    if (!this.isConfigured) {
      console.error('‚ùå EmailService not configured for broadcast message');
      return false;
    }

    try {
      const replyUrl = `${this.appUrl}/reply-message?replyToken=${replyToken}`;
      
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="fr">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Message de l'organisateur - ${eventName}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
            .message-box { background: white; padding: 20px; border-left: 4px solid #667eea; margin: 20px 0; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
            .event-info { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
            .cta-button { display: inline-block; background: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; text-align: center; }
            .cta-button:hover { background: #218838; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
            .reply-info { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üì¢ Message de l'organisateur</h1>
              <p>Nouveau message concernant votre √©v√©nement</p>
            </div>
            
            <div class="content">
              <p>Bonjour <strong>${participantName}</strong>,</p>
              
              <p>Vous avez re√ßu un nouveau message de <strong>${organizerName}</strong> concernant l'√©v√©nement :</p>
              
              <div class="event-info">
                <h3>üèÉ ${eventName}</h3>
                <p><strong>Organisation:</strong> ${organizationName}</p>
              </div>

              <div class="message-box">
                <h4>üí¨ Message :</h4>
                <p style="font-size: 16px; line-height: 1.5;">${messageContent.replace(/\n/g, '<br>')}</p>
                <p><em>‚Äî ${organizerName}, ${organizationName}</em></p>
              </div>

              <div style="text-align: center; margin: 30px 0;">
                <a href="${replyUrl}" class="cta-button">
                  ‚Ü©Ô∏è R√©pondre au message
                </a>
              </div>

              <div class="reply-info">
                <p><strong>üí° Comment r√©pondre :</strong></p>
                <p>Cliquez sur le bouton "R√©pondre au message" ci-dessus pour acc√©der √† l'interface de r√©ponse. Votre r√©ponse sera directement transmise √† l'organisateur dans sa messagerie.</p>
                <p><strong>Note :</strong> Ce lien de r√©ponse est valide pendant 7 jours.</p>
              </div>

              <p>Si vous avez des questions urgentes, vous pouvez √©galement contacter l'organisateur √† l'adresse : <a href="mailto:${this.fromEmail}">${this.fromEmail}</a></p>
              
              <p>Sportivement,<br><strong>L'√©quipe TeamMove</strong></p>
            </div>
            
            <div class="footer">
              <p>Cet email a √©t√© envoy√© par ${organizationName} via TeamMove</p>
              <p>Pour plus d'informations : <a href="${this.appUrl}">${this.appUrl}</a></p>
            </div>
          </div>
        </body>
        </html>
      `;

      const textContent = `
Message de l'organisateur - ${eventName}

Bonjour ${participantName},

Vous avez re√ßu un nouveau message de ${organizerName} concernant l'√©v√©nement "${eventName}" (${organizationName}).

Message :
${messageContent}

‚Äî ${organizerName}, ${organizationName}

Pour r√©pondre √† ce message, cliquez sur ce lien : ${replyUrl}

Ce lien de r√©ponse est valide pendant 7 jours.

Si vous avez des questions urgentes, contactez : ${this.fromEmail}

Sportivement,
L'√©quipe TeamMove

${this.appUrl}
      `;

      const msg = {
        to: participantEmail,
        from: { email: this.fromEmail, name: this.fromName },
        replyTo: { email: this.fromEmail, name: organizationName },
        subject: `üì¢ Message de ${organizationName} - ${eventName}`,
        text: textContent.trim(),
        html: htmlContent,
        trackingSettings: {
          clickTracking: { enable: true },
          openTracking: { enable: true },
        },
        categories: ['broadcast_message_with_reply', 'event_communication'],
      };

      await sgMail.send(msg);
      console.log(`‚úÖ Broadcast message with reply button sent to ${participantEmail} for event ${eventName}`);
      return true;

    } catch (error) {
      console.error(`‚ùå Failed to send broadcast message with reply button to ${participantEmail}:`, error);
      return false;
    }
  }

  // Email de bienvenue pour nouveaux utilisateurs/organisateurs
  async sendWelcomeEmail(
    email: string,
    organizationName: string,
    contactFirstName: string,
    contactLastName: string,
    organizationType: 'club' | 'association' | 'company'
  ): Promise<boolean> {
    const organizationTypeLabel = {
      club: 'club sportif',
      association: 'association',
      company: 'entreprise'
    }[organizationType];

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Bienvenue sur TeamMove - ${organizationName}</title>
          <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f5f5f5; }
            .container { max-width: 700px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px 30px; text-align: center; }
            .header h1 { margin: 0; font-size: 32px; font-weight: bold; }
            .header p { margin: 10px 0 0; font-size: 18px; opacity: 0.9; }
            .content { padding: 40px 30px; }
            .welcome-section { text-align: center; margin-bottom: 40px; }
            .welcome-section h2 { color: #667eea; font-size: 28px; margin-bottom: 15px; }
            .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; margin: 30px 0; }
            .feature-card { background: #f8f9fa; padding: 25px; border-radius: 10px; text-align: center; border-left: 4px solid #667eea; }
            .feature-card .icon { font-size: 48px; margin-bottom: 15px; }
            .feature-card h3 { color: #333; margin: 15px 0 10px; font-size: 20px; }
            .feature-card p { color: #666; font-size: 14px; line-height: 1.5; }
            .cta-section { text-align: center; background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 30px; border-radius: 10px; margin: 30px 0; }
            .cta-button { display: inline-block; background: white; color: #28a745; padding: 15px 40px; text-decoration: none; border-radius: 50px; font-weight: bold; font-size: 18px; margin: 15px 0; transition: transform 0.3s ease; }
            .cta-button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
            .tips-section { background: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; }
            .tips-section h3 { color: #1976d2; margin-bottom: 20px; }
            .tip { display: flex; align-items: flex-start; margin-bottom: 15px; }
            .tip-number { background: #1976d2; color: white; border-radius: 50%; width: 25px; height: 25px; display: flex; align-items: center; justify-content: center; font-weight: bold; margin-right: 15px; flex-shrink: 0; font-size: 14px; }
            .footer { background: #f8f9fa; padding: 30px; text-align: center; color: #666; border-top: 1px solid #e9ecef; }
            .social-links { margin: 20px 0; }
            .social-links a { color: #667eea; text-decoration: none; margin: 0 15px; font-size: 24px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üéâ Bienvenue sur TeamMove !</h1>
              <p>Votre plateforme de covoiturage sportif est pr√™te</p>
            </div>
            
            <div class="content">
              <div class="welcome-section">
                <h2>Bonjour ${contactFirstName} ${contactLastName} !</h2>
                <p style="font-size: 18px; color: #666; line-height: 1.6; margin-bottom: 20px;">
                  F√©licitations ! Votre ${organizationTypeLabel} <strong>"${organizationName}"</strong> 
                  vient d'√™tre inscrite sur TeamMove. Vous pouvez maintenant organiser et g√©rer 
                  le covoiturage pour tous vos √©v√©nements sportifs en toute simplicit√©.
                </p>
              </div>

              <div class="feature-grid">
                <div class="feature-card">
                  <div class="icon">üóìÔ∏è</div>
                  <h3>Cr√©ez vos √©v√©nements</h3>
                  <p>Organisez facilement vos comp√©titions, entra√Ænements et sorties sportives avec toutes les informations n√©cessaires.</p>
                </div>
                <div class="feature-card">
                  <div class="icon">üöó</div>
                  <h3>G√©rez le covoiturage</h3>
                  <p>Optimisez les trajets en connectant conducteurs et passagers automatiquement selon leurs pr√©f√©rences.</p>
                </div>
                <div class="feature-card">
                  <div class="icon">üìß</div>
                  <h3>Communiquez facilement</h3>
                  <p>Envoyez des invitations, des rappels et communiquez avec vos participants en un clic.</p>
                </div>
                <div class="feature-card">
                  <div class="icon">üìä</div>
                  <h3>Suivez vos statistiques</h3>
                  <p>Analysez la participation, l'efficacit√© du covoiturage et optimisez vos √©v√©nements.</p>
                </div>
              </div>

              <div class="cta-section">
                <h3 style="margin: 0 0 15px; font-size: 24px;">Pr√™t √† commencer ?</h3>
                <p style="margin: 0 0 20px; font-size: 16px; opacity: 0.9;">
                  Connectez-vous √† votre tableau de bord et cr√©ez votre premier √©v√©nement
                </p>
                <a href="${this.appUrl}/dashboard" class="cta-button">
                  üöÄ Acc√©der √† mon tableau de bord
                </a>
              </div>

              <div class="tips-section">
                <h3>üí° Conseils pour bien commencer</h3>
                <div class="tip">
                  <div class="tip-number">1</div>
                  <div>
                    <strong>Compl√©tez votre profil</strong><br>
                    Ajoutez le logo de votre organisation, vos sports pratiqu√©s et vos informations de contact.
                  </div>
                </div>
                <div class="tip">
                  <div class="tip-number">2</div>
                  <div>
                    <strong>Cr√©ez votre premier √©v√©nement</strong><br>
                    Testez la plateforme avec un petit √©v√©nement pour vous familiariser avec toutes les fonctionnalit√©s.
                  </div>
                </div>
                <div class="tip">
                  <div class="tip-number">3</div>
                  <div>
                    <strong>Invitez vos membres</strong><br>
                    Utilisez la fonction d'invitation automatique pour que vos participants rejoignent facilement vos √©v√©nements.
                  </div>
                </div>
              </div>

              <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin: 25px 0;">
                <h4 style="color: #856404; margin: 0 0 10px;">üéÅ Offre de lancement</h4>
                <p style="color: #856404; margin: 0; font-size: 14px;">
                  Profitez de toutes les fonctionnalit√©s avanc√©es gratuitement pendant vos premiers √©v√©nements. 
                  D√©couvrez tout le potentiel de TeamMove sans engagement !
                </p>
              </div>

              <p style="text-align: center; margin: 30px 0; color: #666;">
                Besoin d'aide ? Notre √©quipe est l√† pour vous accompagner :<br>
                üìß <a href="mailto:${this.fromEmail}" style="color: #667eea;">${this.fromEmail}</a> | 
                üåê <a href="${this.appUrl}/support" style="color: #667eea;">Centre d'aide</a>
              </p>
            </div>
            
            <div class="footer">
              <p><strong>Bienvenue dans la communaut√© TeamMove !</strong></p>
              <p>Ensemble, rendons le sport plus accessible et plus convivial.</p>
              <div class="social-links">
                <a href="${this.appUrl}">üåê</a>
                <a href="mailto:${this.fromEmail}">üìß</a>
              </div>
              <p style="font-size: 12px; color: #999;">
                TeamMove - Plateforme de covoiturage sportif<br>
                <a href="${this.appUrl}" style="color: #667eea;">${this.appUrl}</a>
              </p>
            </div>
          </div>
        </body>
      </html>
    `;

    const text = `
üéâ Bienvenue sur TeamMove !

Bonjour ${contactFirstName} ${contactLastName} !

F√©licitations ! Votre ${organizationTypeLabel} "${organizationName}" vient d'√™tre inscrite sur TeamMove.

Vous pouvez maintenant :
üóìÔ∏è Cr√©er et g√©rer vos √©v√©nements sportifs
üöó Organiser le covoiturage automatiquement
üìß Communiquer facilement avec vos participants
üìä Suivre vos statistiques et optimiser vos √©v√©nements

üöÄ ACC√âDEZ √Ä VOTRE TABLEAU DE BORD :
${this.appUrl}/dashboard

üí° CONSEILS POUR BIEN COMMENCER :
1. Compl√©tez votre profil avec le logo et les informations de votre organisation
2. Cr√©ez votre premier √©v√©nement pour tester la plateforme
3. Invitez vos membres √† rejoindre vos √©v√©nements

üéÅ OFFRE DE LANCEMENT :
Profitez gratuitement de toutes les fonctionnalit√©s avanc√©es pour vos premiers √©v√©nements !

Besoin d'aide ?
üìß ${this.fromEmail}
üåê ${this.appUrl}/support

Bienvenue dans la communaut√© TeamMove !
L'√©quipe TeamMove
${this.appUrl}
    `;

    return await this.sendEmail({
      to: email,
      toName: `${contactFirstName} ${contactLastName}`,
      subject: `üéâ Bienvenue sur TeamMove - ${organizationName}`,
      html,
      text
    });
  }

  // Email de confirmation de cr√©ation d'√©v√©nement
  async sendEventCreationConfirmation(
    organizerEmail: string,
    organizerName: string,
    eventName: string,
    organizationName: string,
    eventDate: Date,
    eventId: string,
    meetingPoint?: string,
    destination?: string,
    sport?: string,
    description?: string
  ): Promise<boolean> {
    const formattedDate = eventDate.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const formattedTime = eventDate.toLocaleTimeString('fr-FR', {
      hour: '2-digit',
      minute: '2-digit'
    });

    const eventUrl = `${this.appUrl}/events/${eventId}/public`;
    const dashboardUrl = `${this.appUrl}/dashboard`;

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>√âv√©nement cr√©√© avec succ√®s - ${eventName}</title>
          <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f5f5f5; }
            .container { max-width: 650px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .header { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 40px 30px; text-align: center; }
            .header h1 { margin: 0; font-size: 28px; font-weight: bold; }
            .content { padding: 40px 30px; }
            .event-card { background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 30px; border-radius: 12px; margin: 25px 0; border-left: 5px solid #28a745; }
            .event-title { color: #28a745; font-size: 24px; font-weight: bold; margin-bottom: 20px; text-align: center; }
            .event-details { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
            .detail-item { background: white; padding: 15px; border-radius: 8px; text-align: center; }
            .detail-item .icon { font-size: 24px; margin-bottom: 8px; }
            .detail-item .label { font-weight: bold; color: #666; font-size: 12px; text-transform: uppercase; letter-spacing: 0.5px; }
            .detail-item .value { color: #333; font-size: 16px; margin-top: 5px; }
            .action-section { background: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; text-align: center; }
            .cta-button { display: inline-block; background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 50px; font-weight: bold; margin: 10px; transition: transform 0.3s ease; }
            .cta-button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
            .cta-button.primary { background: #28a745; }
            .cta-button.secondary { background: #6c757d; }
            .next-steps { background: #fff3cd; border: 1px solid #ffeaa7; padding: 25px; border-radius: 10px; margin: 25px 0; }
            .next-steps h3 { color: #856404; margin: 0 0 15px; }
            .step { display: flex; align-items: flex-start; margin-bottom: 15px; }
            .step-number { background: #ffc107; color: #333; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; margin-right: 15px; flex-shrink: 0; }
            .footer { background: #f8f9fa; padding: 30px; text-align: center; color: #666; border-top: 1px solid #e9ecef; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>‚úÖ √âv√©nement cr√©√© avec succ√®s !</h1>
              <p>Votre √©v√©nement est maintenant en ligne et pr√™t √† accueillir des participants</p>
            </div>
            
            <div class="content">
              <p style="font-size: 18px; text-align: center; margin-bottom: 30px;">
                Bonjour <strong>${organizerName}</strong>,<br>
                F√©licitations ! Votre √©v√©nement a √©t√© cr√©√© avec succ√®s sur TeamMove.
              </p>

              <div class="event-card">
                <div class="event-title">üèÉ ${eventName}</div>
                <div class="event-details">
                  <div class="detail-item">
                    <div class="icon">üè¢</div>
                    <div class="label">Organisation</div>
                    <div class="value">${organizationName}</div>
                  </div>
                  ${sport ? `
                  <div class="detail-item">
                    <div class="icon">‚öΩ</div>
                    <div class="label">Sport</div>
                    <div class="value">${sport}</div>
                  </div>
                  ` : ''}
                  <div class="detail-item">
                    <div class="icon">üìÖ</div>
                    <div class="label">Date</div>
                    <div class="value">${formattedDate}</div>
                  </div>
                  <div class="detail-item">
                    <div class="icon">üïí</div>
                    <div class="label">Heure</div>
                    <div class="value">${formattedTime}</div>
                  </div>
                  ${meetingPoint ? `
                  <div class="detail-item">
                    <div class="icon">üìç</div>
                    <div class="label">Rendez-vous</div>
                    <div class="value">${meetingPoint}</div>
                  </div>
                  ` : ''}
                  ${destination ? `
                  <div class="detail-item">
                    <div class="icon">üéØ</div>
                    <div class="label">Destination</div>
                    <div class="value">${destination}</div>
                  </div>
                  ` : ''}
                </div>
                ${description ? `
                <div style="margin-top: 20px; padding: 15px; background: white; border-radius: 8px;">
                  <div class="label">üìù DESCRIPTION</div>
                  <div style="margin-top: 10px; color: #333; line-height: 1.5;">${description.replace(/\n/g, '<br>')}</div>
                </div>
                ` : ''}
              </div>

              <div class="action-section">
                <h3 style="margin: 0 0 20px; color: #1976d2;">üöÄ Actions rapides</h3>
                <a href="${eventUrl}" class="cta-button primary">
                  üëÄ Voir l'√©v√©nement public
                </a>
                <a href="${dashboardUrl}" class="cta-button secondary">
                  üìä G√©rer depuis le tableau de bord
                </a>
              </div>

              <div class="next-steps">
                <h3>üìã Prochaines √©tapes recommand√©es</h3>
                <div class="step">
                  <div class="step-number">1</div>
                  <div>
                    <strong>Partagez l'√©v√©nement</strong><br>
                    Copiez le lien public de votre √©v√©nement et partagez-le avec vos participants par email, SMS ou sur vos r√©seaux sociaux.
                  </div>
                </div>
                <div class="step">
                  <div class="step-number">2</div>
                  <div>
                    <strong>Invitez des participants</strong><br>
                    Utilisez la fonction d'invitation automatique depuis votre tableau de bord pour envoyer des emails personnalis√©s.
                  </div>
                </div>
                <div class="step">
                  <div class="step-number">3</div>
                  <div>
                    <strong>Surveillez les inscriptions</strong><br>
                    Suivez en temps r√©el qui s'inscrit comme conducteur ou passager depuis votre tableau de bord.
                  </div>
                </div>
                <div class="step">
                  <div class="step-number">4</div>
                  <div>
                    <strong>Communiquez avec vos participants</strong><br>
                    Envoyez des messages, des rappels ou des mises √† jour directement depuis la plateforme.
                  </div>
                </div>
              </div>

              <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 20px; border-radius: 8px; margin: 25px 0; text-align: center;">
                <h4 style="color: #155724; margin: 0 0 10px;">üîó Lien de partage de votre √©v√©nement</h4>
                <p style="margin: 10px 0; font-family: monospace; background: white; padding: 10px; border-radius: 4px; word-break: break-all;">
                  ${eventUrl}
                </p>
                <p style="color: #155724; margin: 0; font-size: 14px;">
                  Partagez ce lien pour que vos participants puissent s'inscrire facilement !
                </p>
              </div>

              <p style="text-align: center; margin: 30px 0; color: #666;">
                Besoin d'aide ? Notre √©quipe est disponible :<br>
                üìß <a href="mailto:${this.fromEmail}" style="color: #28a745;">${this.fromEmail}</a> | 
                üåê <a href="${this.appUrl}/support" style="color: #28a745;">Centre d'aide</a>
              </p>
            </div>
            
            <div class="footer">
              <p><strong>Merci d'utiliser TeamMove !</strong></p>
              <p>Votre √©v√©nement contribue √† rendre le sport plus accessible et plus convivial.</p>
              <p style="font-size: 12px; color: #999; margin-top: 20px;">
                TeamMove - Plateforme de covoiturage sportif<br>
                <a href="${this.appUrl}" style="color: #28a745;">${this.appUrl}</a>
              </p>
            </div>
          </div>
        </body>
      </html>
    `;

    const text = `
‚úÖ √âv√©nement cr√©√© avec succ√®s !

Bonjour ${organizerName},

F√©licitations ! Votre √©v√©nement "${eventName}" a √©t√© cr√©√© avec succ√®s sur TeamMove.

üìù D√âTAILS DE L'√âV√âNEMENT :
‚Ä¢ Organisation : ${organizationName}
${sport ? `‚Ä¢ Sport : ${sport}` : ''}
‚Ä¢ Date : ${formattedDate}
‚Ä¢ Heure : ${formattedTime}
${meetingPoint ? `‚Ä¢ Rendez-vous : ${meetingPoint}` : ''}
${destination ? `‚Ä¢ Destination : ${destination}` : ''}
${description ? `‚Ä¢ Description : ${description}` : ''}

üîó LIEN DE PARTAGE :
${eventUrl}

üöÄ ACTIONS RAPIDES :
‚Ä¢ Voir l'√©v√©nement public : ${eventUrl}
‚Ä¢ G√©rer depuis le tableau de bord : ${dashboardUrl}

üìã PROCHAINES √âTAPES RECOMMAND√âES :
1. Partagez le lien de votre √©v√©nement avec vos participants
2. Invitez des participants depuis votre tableau de bord
3. Surveillez les inscriptions en temps r√©el
4. Communiquez avec vos participants via la plateforme

Besoin d'aide ?
üìß ${this.fromEmail}
üåê ${this.appUrl}/support

Merci d'utiliser TeamMove !
L'√©quipe TeamMove
${this.appUrl}
    `;

    return await this.sendEmail({
      to: organizerEmail,
      toName: organizerName,
      subject: `‚úÖ √âv√©nement cr√©√© : ${eventName} - ${organizationName}`,
      html,
      text
    });
  }

  // Email pour l'organisateur lors d'une nouvelle inscription
  async sendParticipantRegistrationNotification(
    organizerEmail: string,
    organizerName: string,
    participantName: string,
    participantRole: 'driver' | 'passenger',
    eventName: string,
    organizationName: string,
    eventId: string,
    availableSeats?: number,
    participantComment?: string
  ): Promise<boolean> {
    const roleLabel = participantRole === 'driver' ? 'Conducteur' : 'Passager';
    const roleIcon = participantRole === 'driver' ? 'üöó' : 'üë§';
    const eventUrl = `${this.appUrl}/events/${eventId}/public`;
    const dashboardUrl = `${this.appUrl}/dashboard`;

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Nouvelle inscription - ${eventName}</title>
          <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .header { background: linear-gradient(135deg, #17a2b8 0%, #007bff 100%); color: white; padding: 40px 30px; text-align: center; }
            .header h1 { margin: 0; font-size: 28px; font-weight: bold; }
            .content { padding: 40px 30px; }
            .notification-card { background: linear-gradient(135deg, #e8f5e8 0%, #d4edda 100%); padding: 25px; border-radius: 12px; margin: 25px 0; border-left: 5px solid #28a745; text-align: center; }
            .participant-info { background: #f8f9fa; padding: 25px; border-radius: 10px; margin: 20px 0; }
            .participant-info h3 { color: #007bff; margin: 0 0 15px; text-align: center; }
            .info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }
            .info-item { text-align: center; padding: 15px; background: white; border-radius: 8px; }
            .info-item .icon { font-size: 24px; margin-bottom: 8px; }
            .info-item .label { font-weight: bold; color: #666; font-size: 12px; text-transform: uppercase; }
            .info-item .value { color: #333; font-size: 16px; margin-top: 5px; }
            .comment-section { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .comment-section h4 { color: #856404; margin: 0 0 10px; }
            .action-buttons { text-align: center; margin: 30px 0; }
            .cta-button { display: inline-block; background: #007bff; color: white; padding: 15px 25px; text-decoration: none; border-radius: 50px; font-weight: bold; margin: 10px; transition: transform 0.3s ease; }
            .cta-button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
            .cta-button.primary { background: #28a745; }
            .stats-section { background: #e3f2fd; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: center; }
            .footer { background: #f8f9fa; padding: 30px; text-align: center; color: #666; border-top: 1px solid #e9ecef; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üéâ Nouvelle inscription !</h1>
              <p>Un participant vient de s'inscrire √† votre √©v√©nement</p>
            </div>
            
            <div class="content">
              <p style="font-size: 18px; text-align: center; margin-bottom: 30px;">
                Bonjour <strong>${organizerName}</strong>,<br>
                Excellente nouvelle ! Une nouvelle personne vient de s'inscrire √† votre √©v√©nement.
              </p>

              <div class="notification-card">
                <div style="font-size: 48px; margin-bottom: 15px;">${roleIcon}</div>
                <h2 style="margin: 0; color: #28a745;">${participantName}</h2>
                <p style="margin: 10px 0; font-size: 18px;">s'est inscrit comme <strong>${roleLabel}</strong></p>
                <p style="margin: 0; color: #666;">pour l'√©v√©nement "${eventName}"</p>
              </div>

              <div class="participant-info">
                <h3>${roleIcon} Informations sur la participation</h3>
                <div class="info-grid">
                  <div class="info-item">
                    <div class="icon">üë§</div>
                    <div class="label">Participant</div>
                    <div class="value">${participantName}</div>
                  </div>
                  <div class="info-item">
                    <div class="icon">${roleIcon}</div>
                    <div class="label">R√¥le</div>
                    <div class="value">${roleLabel}</div>
                  </div>
                  ${participantRole === 'driver' && availableSeats ? `
                  <div class="info-item">
                    <div class="icon">üí∫</div>
                    <div class="label">Places offertes</div>
                    <div class="value">${availableSeats} place${availableSeats > 1 ? 's' : ''}</div>
                  </div>
                  ` : ''}
                  <div class="info-item">
                    <div class="icon">üèÉ</div>
                    <div class="label">√âv√©nement</div>
                    <div class="value">${eventName}</div>
                  </div>
                </div>
                ${participantComment ? `
                <div class="comment-section">
                  <h4>üí¨ Commentaire du participant :</h4>
                  <p style="margin: 0; font-style: italic; color: #856404;">"${participantComment}"</p>
                </div>
                ` : ''}
              </div>

              <div class="stats-section">
                <h3 style="color: #1976d2; margin: 0 0 15px;">üìä Conseil de gestion</h3>
                <p style="margin: 0; color: #1976d2;">
                  ${participantRole === 'driver' 
                    ? `üöó Excellent ! Plus vous avez de conducteurs, plus il sera facile d'organiser le covoiturage. N'h√©sitez pas √† encourager d'autres membres √† se proposer comme conducteurs.`
                    : `üë§ Parfait ! Assurez-vous qu'il y a suffisamment de conducteurs pour accueillir tous les passagers. Vous pouvez inviter des membres qui ont une voiture √† se proposer comme conducteurs.`
                  }
                </p>
              </div>

              <div class="action-buttons">
                <a href="${eventUrl}" class="cta-button primary">
                  üëÄ Voir tous les participants
                </a>
                <a href="${dashboardUrl}" class="cta-button">
                  üìä Tableau de bord
                </a>
              </div>

              <div style="background: #d1ecf1; border: 1px solid #bee5eb; padding: 20px; border-radius: 8px; margin: 25px 0;">
                <h4 style="color: #0c5460; margin: 0 0 10px;">üí° Astuce de gestion</h4>
                <p style="color: #0c5460; margin: 0; font-size: 14px;">
                  Vous pouvez envoyer un message personnalis√© √† tous vos participants depuis votre tableau de bord. 
                  C'est id√©al pour donner des informations compl√©mentaires ou des consignes de derni√®re minute !
                </p>
              </div>

              <p style="text-align: center; margin: 30px 0; color: #666;">
                Besoin d'aide pour g√©rer votre √©v√©nement ?<br>
                üìß <a href="mailto:${this.fromEmail}" style="color: #007bff;">${this.fromEmail}</a> | 
                üåê <a href="${this.appUrl}/support" style="color: #007bff;">Centre d'aide</a>
              </p>
            </div>
            
            <div class="footer">
              <p><strong>Merci d'utiliser TeamMove !</strong></p>
              <p>Votre √©v√©nement rassemble la communaut√© sportive.</p>
              <p style="font-size: 12px; color: #999; margin-top: 20px;">
                TeamMove - Plateforme de covoiturage sportif<br>
                <a href="${this.appUrl}" style="color: #007bff;">${this.appUrl}</a>
              </p>
            </div>
          </div>
        </body>
      </html>
    `;

    const text = `
üéâ Nouvelle inscription √† votre √©v√©nement !

Bonjour ${organizerName},

Excellente nouvelle ! ${participantName} vient de s'inscrire comme ${roleLabel} √† votre √©v√©nement "${eventName}".

üë§ INFORMATIONS SUR LA PARTICIPATION :
‚Ä¢ Participant : ${participantName}
‚Ä¢ R√¥le : ${roleLabel}
${participantRole === 'driver' && availableSeats ? `‚Ä¢ Places offertes : ${availableSeats} place${availableSeats > 1 ? 's' : ''}` : ''}
${participantComment ? `‚Ä¢ Commentaire : "${participantComment}"` : ''}

üöÄ ACTIONS :
‚Ä¢ Voir tous les participants : ${eventUrl}
‚Ä¢ Tableau de bord : ${dashboardUrl}

üí° CONSEIL :
${participantRole === 'driver' 
  ? `Excellent ! Plus vous avez de conducteurs, plus il sera facile d'organiser le covoiturage.`
  : `Assurez-vous qu'il y a suffisamment de conducteurs pour tous les passagers.`
}

Vous pouvez envoyer un message √† tous vos participants depuis votre tableau de bord.

Besoin d'aide ?
üìß ${this.fromEmail}
üåê ${this.appUrl}/support

Merci d'utiliser TeamMove !
L'√©quipe TeamMove
${this.appUrl}
    `;

    return await this.sendEmail({
      to: organizerEmail,
      toName: organizerName,
      subject: `üéâ Nouvelle inscription : ${participantName} - ${eventName}`,
      html,
      text
    });
  }


  // Email de confirmation d'abonnement Stripe
  async sendSubscriptionConfirmationEmail(organizationId: string, planId: string): Promise<boolean> {
    console.log('üìß Sending subscription confirmation email');

    try {
      // Importer dynamiquement pour √©viter les imports circulaires
      const { getOrganizationById } = await import('./storage.js');
      const { SUBSCRIPTION_PLANS } = await import('./subscription-config.js');

      const organization = await getOrganizationById(organizationId);
      if (!organization) {
        console.error('‚ùå Organization not found for subscription confirmation');
        return false;
      }

      const plan = SUBSCRIPTION_PLANS[planId];
      if (!plan) {
        console.error('‚ùå Plan not found for subscription confirmation');
        return false;
      }

      const dashboardUrl = `${this.appUrl}/dashboard`;
      const supportUrl = `${this.appUrl}/support`;

      const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Abonnement Confirm√© - TeamMove</title>
</head>
<body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
  <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px; text-align: center; color: white; margin-bottom: 30px;">
    <h1 style="margin: 0; font-size: 28px;">üéâ Abonnement Confirm√© !</h1>
    <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">Bienvenue dans ${plan.name} chez TeamMove</p>
  </div>

  <div style="background: #f8f9fa; padding: 25px; border-radius: 8px; margin-bottom: 25px;">
    <h2 style="color: #2c3e50; margin-top: 0;">Bonjour ${organization.contactFirstName || organization.name} !</h2>
    <p>F√©licitations ! Votre abonnement <strong>${plan.name}</strong> a √©t√© activ√© avec succ√®s.</p>
  </div>

  <div style="background: white; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #495057; margin-top: 0;">üìã R√©capitulatif de votre abonnement</h3>
    <table style="width: 100%; border-collapse: collapse;">
      <tr>
        <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Formule :</strong></td>
        <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${plan.name}</td>
      </tr>
      <tr>
        <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Prix :</strong></td>
        <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${(plan.price / 100).toFixed(2)}‚Ç¨</td>
      </tr>
      <tr>
        <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Facturation :</strong></td>
        <td style="padding: 8px 0; border-bottom: 1px solid #eee;">
          ${plan.billingInterval === 'monthly' ? 'Mensuelle' : 
            plan.billingInterval === 'annual' ? 'Annuelle' : 
            plan.billingInterval === 'pack_single' ? 'Paiement unique' : 
            'Pack de 10 √©v√©nements'}
        </td>
      </tr>
    </table>
  </div>

  <div style="background: #e8f5e8; border-left: 4px solid #28a745; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #155724; margin-top: 0;">‚ú® Vos avantages</h3>
    <ul style="margin: 0; padding-left: 20px;">
      ${plan.features.map(feature => `<li>${feature}</li>`).join('')}
    </ul>
  </div>

  <div style="text-align: center; margin: 30px 0;">
    <a href="${dashboardUrl}" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block;">üöÄ Acc√©der √† mon tableau de bord</a>
  </div>

  <div style="background: #f8f9fa; padding: 20px; border-radius: 6px; margin-top: 30px;">
    <h4 style="margin-top: 0; color: #495057;">Besoin d'aide ?</h4>
    <p style="margin-bottom: 0;">Notre √©quipe support est l√† pour vous accompagner :</p>
    <p style="margin: 5px 0 0 0;">
      üìß <a href="mailto:${this.fromEmail}" style="color: #007bff;">${this.fromEmail}</a><br>
      üåê <a href="${supportUrl}" style="color: #007bff;">Centre d'aide</a>
    </p>
  </div>

  <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #6c757d; font-size: 14px;">
    <p>Merci de faire confiance √† TeamMove !</p>
    <p><a href="${this.appUrl}" style="color: #007bff;">TeamMove</a> - Simplifiez vos √©v√©nements sportifs</p>
  </div>
</body>
</html>
      `;

      const text = `
üéâ Abonnement Confirm√© !

Bonjour ${organization.contactFirstName || organization.name} !

F√©licitations ! Votre abonnement ${plan.name} a √©t√© activ√© avec succ√®s.

üìã R√âCAPITULATIF :
‚Ä¢ Formule : ${plan.name}
‚Ä¢ Prix : ${(plan.price / 100).toFixed(2)}‚Ç¨
‚Ä¢ Facturation : ${plan.billingInterval === 'monthly' ? 'Mensuelle' : 
    plan.billingInterval === 'annual' ? 'Annuelle' : 
    plan.billingInterval === 'pack_single' ? 'Paiement unique' : 
    'Pack de 10 √©v√©nements'}

‚ú® VOS AVANTAGES :
${plan.features.map(feature => `‚Ä¢ ${feature}`).join('\n')}

üöÄ PROCHAINES √âTAPES :
‚Ä¢ Acc√©dez √† votre tableau de bord : ${dashboardUrl}
‚Ä¢ Commencez √† cr√©er vos √©v√©nements
‚Ä¢ Profitez de toutes les fonctionnalit√©s

Besoin d'aide ?
üìß ${this.fromEmail}
üåê ${supportUrl}

Merci de faire confiance √† TeamMove !
L'√©quipe TeamMove
${this.appUrl}
      `;

      return await this.sendEmail({
        to: organization.email,
        toName: organization.name,
        subject: `üéâ Abonnement ${plan.name} confirm√© - Bienvenue !`,
        html,
        text
      });
    } catch (error) {
      console.error('‚ùå Error sending subscription confirmation email:', error);
      return false;
    }
  }

  // Email d'√©chec de paiement
  async sendPaymentFailedEmail(organizationId: string): Promise<boolean> {
    console.log('üìß Sending payment failed email');

    try {
      const { getOrganizationById } = await import('./storage.js');

      const organization = await getOrganizationById(organizationId);
      if (!organization) {
        console.error('‚ùå Organization not found for payment failed email');
        return false;
      }

      const dashboardUrl = `${this.appUrl}/dashboard`;
      const supportUrl = `${this.appUrl}/support`;

      const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Probl√®me de Paiement - TeamMove</title>
</head>
<body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
  <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); padding: 30px; border-radius: 10px; text-align: center; color: white; margin-bottom: 30px;">
    <h1 style="margin: 0; font-size: 28px;">‚ö†Ô∏è Probl√®me de Paiement</h1>
    <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">Action requise pour votre abonnement</p>
  </div>

  <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
    <h2 style="color: #856404; margin-top: 0;">Bonjour ${organization.contactFirstName || organization.name},</h2>
    <p style="color: #856404;">Nous n'avons pas pu traiter le paiement de votre abonnement TeamMove.</p>
  </div>

  <div style="background: white; border: 2px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #495057; margin-top: 0;">üîß Que faire maintenant ?</h3>
    <ol style="color: #495057;">
      <li><strong>V√©rifiez vos informations de paiement</strong> dans votre tableau de bord</li>
      <li><strong>Assurez-vous</strong> que votre carte bancaire n'est pas expir√©e</li>
      <li><strong>Contactez votre banque</strong> si n√©cessaire</li>
      <li><strong>Renouvelez le paiement</strong> depuis votre tableau de bord</li>
    </ol>
  </div>

  <div style="text-align: center; margin: 30px 0;">
    <a href="${dashboardUrl}" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block;">üîß Mettre √† jour mes informations</a>
  </div>

  <div style="background: #f8f9fa; padding: 20px; border-radius: 6px;">
    <h4 style="margin-top: 0; color: #495057;">Besoin d'aide ?</h4>
    <p style="margin-bottom: 0;">Notre √©quipe support est l√† pour vous aider :</p>
    <p style="margin: 5px 0 0 0;">
      üìß <a href="mailto:${this.fromEmail}" style="color: #007bff;">${this.fromEmail}</a><br>
      üåê <a href="${supportUrl}" style="color: #007bff;">Contacter le support</a>
    </p>
  </div>

  <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #6c757d; font-size: 14px;">
    <p><a href="${this.appUrl}" style="color: #007bff;">TeamMove</a> - Simplifiez vos √©v√©nements sportifs</p>
  </div>
</body>
</html>
      `;

      const text = `
‚ö†Ô∏è Probl√®me de Paiement

Bonjour ${organization.contactFirstName || organization.name},

Nous n'avons pas pu traiter le paiement de votre abonnement TeamMove.

üîß QUE FAIRE MAINTENANT ?
1. V√©rifiez vos informations de paiement dans votre tableau de bord
2. Assurez-vous que votre carte bancaire n'est pas expir√©e
3. Contactez votre banque si n√©cessaire
4. Renouvelez le paiement depuis votre tableau de bord

üîß Mettre √† jour mes informations : ${dashboardUrl}

Besoin d'aide ?
üìß ${this.fromEmail}
üåê ${supportUrl}

L'√©quipe TeamMove
${this.appUrl}
      `;

      return await this.sendEmail({
        to: organization.email,
        toName: organization.name,
        subject: '‚ö†Ô∏è Probl√®me de paiement - Action requise',
        html,
        text
      });
    } catch (error) {
      console.error('‚ùå Error sending payment failed email:', error);
      return false;
    }
  }

  // Email d'annulation d'abonnement
  async sendSubscriptionCancelledEmail(organizationId: string): Promise<boolean> {
    console.log('üìß Sending subscription cancelled email');

    try {
      const { getOrganizationById } = await import('./storage.js');

      const organization = await getOrganizationById(organizationId);
      if (!organization) {
        console.error('‚ùå Organization not found for cancellation email');
        return false;
      }

      const dashboardUrl = `${this.appUrl}/dashboard`;
      const subscriptionUrl = `${this.appUrl}/subscription`;

      const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Abonnement Annul√© - TeamMove</title>
</head>
<body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
  <div style="background: linear-gradient(135deg, #6c757d 0%, #495057 100%); padding: 30px; border-radius: 10px; text-align: center; color: white; margin-bottom: 30px;">
    <h1 style="margin: 0; font-size: 28px;">üìã Abonnement Annul√©</h1>
    <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">Nous sommes d√©sol√©s de vous voir partir</p>
  </div>

  <div style="background: #f8f9fa; padding: 25px; border-radius: 8px; margin-bottom: 25px;">
    <h2 style="color: #2c3e50; margin-top: 0;">Bonjour ${organization.contactFirstName || organization.name},</h2>
    <p>Votre abonnement TeamMove a √©t√© annul√© comme demand√©.</p>
    <p>Vous avez maintenant acc√®s √† l'<strong>offre D√©couverte</strong> qui vous permet de cr√©er 1 √©v√©nement avec jusqu'√† 20 invitations.</p>
  </div>

  <div style="background: #e8f4fd; border-left: 4px solid #007bff; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #004085; margin-top: 0;">üí° L'offre D√©couverte inclut :</h3>
    <ul style="margin: 0; padding-left: 20px; color: #004085;">
      <li>1 √©v√©nement maximum</li>
      <li>Jusqu'√† 20 invitations</li>
      <li>Gestion du covoiturage</li>
      <li>Support par email</li>
    </ul>
  </div>

  <div style="background: white; border: 2px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #495057; margin-top: 0;">üîÑ Envie de revenir ?</h3>
    <p>Vous pouvez √† tout moment souscrire √† nouveau √† une formule payante pour retrouver tous les avantages de TeamMove.</p>
  </div>

  <div style="text-align: center; margin: 30px 0;">
    <a href="${subscriptionUrl}" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block; margin-right: 10px;">üîÑ Voir nos formules</a>
    <a href="${dashboardUrl}" style="background: #6c757d; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block;">üìä Mon tableau de bord</a>
  </div>

  <div style="background: #f8f9fa; padding: 20px; border-radius: 6px;">
    <h4 style="margin-top: 0; color: #495057;">Vos retours nous int√©ressent</h4>
    <p style="margin-bottom: 0;">N'h√©sitez pas √† nous faire part de vos commentaires pour nous aider √† am√©liorer TeamMove :</p>
    <p style="margin: 5px 0 0 0;">
      üìß <a href="mailto:${this.fromEmail}" style="color: #007bff;">${this.fromEmail}</a>
    </p>
  </div>

  <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #6c757d; font-size: 14px;">
    <p>Merci d'avoir utilis√© TeamMove !</p>
    <p><a href="${this.appUrl}" style="color: #007bff;">TeamMove</a> - Simplifiez vos √©v√©nements sportifs</p>
  </div>
</body>
</html>
      `;

      const text = `
üìã Abonnement Annul√©

Bonjour ${organization.contactFirstName || organization.name},

Votre abonnement TeamMove a √©t√© annul√© comme demand√©.

Vous avez maintenant acc√®s √† l'offre D√©couverte qui vous permet de cr√©er 1 √©v√©nement avec jusqu'√† 20 invitations.

üí° L'OFFRE D√âCOUVERTE INCLUT :
‚Ä¢ 1 √©v√©nement maximum
‚Ä¢ Jusqu'√† 20 invitations  
‚Ä¢ Gestion du covoiturage
‚Ä¢ Support par email

üîÑ ENVIE DE REVENIR ?
Vous pouvez √† tout moment souscrire √† nouveau √† une formule payante pour retrouver tous les avantages de TeamMove.

üîÑ Voir nos formules : ${subscriptionUrl}
üìä Mon tableau de bord : ${dashboardUrl}

VOS RETOURS NOUS INT√âRESSENT :
üìß ${this.fromEmail}

Merci d'avoir utilis√© TeamMove !
L'√©quipe TeamMove
${this.appUrl}
      `;

      return await this.sendEmail({
        to: organization.email,
        toName: organization.name,
        subject: 'üìã Confirmation d\'annulation de votre abonnement',
        html,
        text
      });
    } catch (error) {
      console.error('‚ùå Error sending cancellation email:', error);
      return false;
    }
  }

}

// Fonctions export√©es pour utilisation directe
export async function sendSubscriptionConfirmationEmail(organizationId: string, planId: string): Promise<boolean> {
  return await emailServiceEnhanced.sendSubscriptionConfirmationEmail(organizationId, planId);
}

export async function sendPaymentFailedEmail(organizationId: string): Promise<boolean> {
  return await emailServiceEnhanced.sendPaymentFailedEmail(organizationId);
}

export async function sendSubscriptionCancelledEmail(organizationId: string): Promise<boolean> {
  return await emailServiceEnhanced.sendSubscriptionCancelledEmail(organizationId);
}

// Email de suppression de compte
export async function sendAccountDeletionEmail(userEmail: string, userName: string): Promise<boolean> {
  console.log('üìß Sending account deletion confirmation email');

  const appUrl = process.env.APP_URL || 'https://teammove.fr';
  const supportEmail = process.env.SENDGRID_FROM_EMAIL || 'support@teammove.fr';

  const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Compte Supprim√© - TeamMove</title>
</head>
<body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
  <div style="background: linear-gradient(135deg, #6c757d 0%, #495057 100%); padding: 30px; border-radius: 10px; text-align: center; color: white; margin-bottom: 30px;">
    <h1 style="margin: 0; font-size: 28px;">üëã Au Revoir</h1>
    <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">Votre compte a √©t√© supprim√©</p>
  </div>

  <div style="background: #f8f9fa; padding: 25px; border-radius: 8px; margin-bottom: 25px;">
    <h2 style="color: #2c3e50; margin-top: 0;">Bonjour ${userName},</h2>
    <p>Votre compte TeamMove a √©t√© d√©finitivement supprim√© comme demand√©.</p>
    <p><strong>Cette action est irr√©versible.</strong> Toutes vos donn√©es ont √©t√© supprim√©es de nos serveurs.</p>
  </div>

  <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #856404; margin-top: 0;">üóëÔ∏è Donn√©es supprim√©es :</h3>
    <ul style="color: #856404; margin: 0; padding-left: 20px;">
      <li>Informations du compte et organisation</li>
      <li>Tous les √©v√©nements cr√©√©s</li>
      <li>Historique des participants</li>
      <li>Messages et communications</li>
      <li>Donn√©es de facturation (si applicable)</li>
    </ul>
  </div>

  <div style="background: #e8f4fd; border-left: 4px solid #007bff; padding: 20px; margin-bottom: 25px;">
    <h3 style="color: #004085; margin-top: 0;">üîÑ Vous nous manquerez !</h3>
    <p style="color: #004085; margin-bottom: 0;">Si vous changez d'avis, vous pouvez cr√©er un nouveau compte √† tout moment sur <a href="${appUrl}" style="color: #007bff;">${appUrl}</a></p>
  </div>

  <div style="background: #f8f9fa; padding: 20px; border-radius: 6px;">
    <h4 style="margin-top: 0; color: #495057;">Vos retours nous int√©ressent</h4>
    <p style="margin-bottom: 0;">N'h√©sitez pas √† nous faire part de vos commentaires pour nous aider √† am√©liorer TeamMove :</p>
    <p style="margin: 5px 0 0 0;">
      üìß <a href="mailto:${supportEmail}" style="color: #007bff;">${supportEmail}</a>
    </p>
  </div>

  <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #6c757d; font-size: 14px;">
    <p>Merci d'avoir utilis√© TeamMove !</p>
    <p><a href="${appUrl}" style="color: #007bff;">TeamMove</a> - Simplifiez vos √©v√©nements sportifs</p>
  </div>
</body>
</html>
  `;

  const text = `
üëã Au Revoir

Bonjour ${userName},

Votre compte TeamMove a √©t√© d√©finitivement supprim√© comme demand√©.

Cette action est irr√©versible. Toutes vos donn√©es ont √©t√© supprim√©es de nos serveurs.

üóëÔ∏è DONN√âES SUPPRIM√âES :
‚Ä¢ Informations du compte et organisation
‚Ä¢ Tous les √©v√©nements cr√©√©s
‚Ä¢ Historique des participants
‚Ä¢ Messages et communications
‚Ä¢ Donn√©es de facturation (si applicable)

üîÑ VOUS NOUS MANQUEREZ !
Si vous changez d'avis, vous pouvez cr√©er un nouveau compte √† tout moment sur ${appUrl}

VOS RETOURS NOUS INT√âRESSENT :
üìß ${supportEmail}

Merci d'avoir utilis√© TeamMove !
L'√©quipe TeamMove
${appUrl}
  `;

  return await emailServiceEnhanced.sendEmail({
    to: userEmail,
    toName: userName,
    subject: 'üëã Confirmation de suppression de votre compte TeamMove',
    html,
    text
  });
}

export const emailServiceEnhanced = new EmailServiceEnhanced();
export { EmailServiceEnhanced };
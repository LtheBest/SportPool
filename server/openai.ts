import OpenAI from 'openai';

// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface ChatbotResponse {
  message: string;
  success: boolean;
  error?: string;
}

class ChatbotService {
  private systemPrompt = `
    Tu es un assistant virtuel pour une plateforme de gestion d'√©v√©nements sportifs et associatifs.
    
    Ton r√¥le est d'aider les utilisateurs avec :
    - La cr√©ation et gestion d'√©v√©nements
    - L'inscription et participation aux √©v√©nements
    - Les questions sur le covoiturage
    - Les informations g√©n√©rales sur la plateforme
    - Les probl√®mes techniques simples
    
    Tu dois √™tre :
    - Amical et professionnel
    - Concis mais informatif
    - Orient√© solution
    - Capable de guider les utilisateurs vers les bonnes fonctionnalit√©s
    
    Si tu ne peux pas r√©pondre √† une question sp√©cifique, sugg√®re √† l'utilisateur de contacter le support.
  `;

  async sendMessage(userMessage: string, conversationHistory: ChatMessage[] = []): Promise<ChatbotResponse> {
    try {
      // V√©rifier si l'API key est pr√©sente
      if (!process.env.OPENAI_API_KEY) {
        console.error('OpenAI API Key not found in environment variables');
        return {
          message: "Le service de chat intelligent n'est pas configur√©. Veuillez contacter l'administrateur.",
          success: false,
          error: 'Missing API Key'
        };
      }

      // Fallback simple si l'API OpenAI n'est pas disponible
      if (!openai) {
        return this.getFallbackResponse(userMessage);
      }

      const messages: ChatMessage[] = [
        { role: 'system', content: this.systemPrompt },
        ...conversationHistory,
        { role: 'user', content: userMessage }
      ];

      console.log('Sending request to OpenAI with messages:', messages.length);

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages,
        max_tokens: 500,
        temperature: 0.7,
      });

      const assistantMessage = completion.choices[0]?.message?.content;

      if (!assistantMessage) {
        throw new Error('No response from OpenAI');
      }

      console.log('OpenAI response received successfully');
      return {
        message: assistantMessage,
        success: true
      };

    } catch (error: any) {
      console.error('OpenAI API Error details:', {
        message: error.message,
        status: error.status,
        code: error.code,
        type: error.type
      });
      
      // Si c'est une erreur de quota ou d'API key, utiliser le fallback
      if (error.code === 'insufficient_quota' || error.status === 401 || error.code === 'invalid_api_key') {
        return this.getFallbackResponse(userMessage);
      }
      
      return {
        message: "D√©sol√©, je rencontre un probl√®me technique. Veuillez r√©essayer dans quelques instants ou contacter le support.",
        success: false,
        error: 'OpenAI API Error'
      };
    }
  }

  private getFallbackResponse(userMessage: string): ChatbotResponse {
    const lowerMessage = userMessage.toLowerCase();
    
    // R√©ponses bas√©es sur des mots-cl√©s simples
    if (lowerMessage.includes('√©v√©nement') || lowerMessage.includes('event')) {
      return {
        message: `Pour cr√©er un √©v√©nement, rendez-vous dans votre tableau de bord et cliquez sur "Cr√©er un √©v√©nement". Vous pourrez ensuite renseigner tous les d√©tails : nom, sport, date, lieu de rendez-vous et destination.

Une fois cr√©√©, vous pouvez inviter des participants par email qui pourront s'inscrire comme conducteurs (avec places disponibles) ou passagers.`,
        success: true
      };
    }
    
    if (lowerMessage.includes('covoiturage') || lowerMessage.includes('voiture')) {
      return {
        message: `Notre syst√®me de covoiturage permet aux participants de s'inscrire soit comme :

üöó **Conducteur** : Pr√©cisez le nombre de places disponibles dans votre v√©hicule
üë• **Passager** : Vous serez associ√© automatiquement √† un conducteur

Les organisateurs peuvent suivre en temps r√©el le nombre de participants, conducteurs et places disponibles.`,
        success: true
      };
    }
    
    if (lowerMessage.includes('inscription') || lowerMessage.includes('compte')) {
      return {
        message: `Pour cr√©er votre compte organisation :

1. Cliquez sur "Commencer gratuitement"
2. Choisissez votre type d'organisation (club, association, entreprise)
3. Renseignez vos informations de contact
4. Optionnel : ajoutez votre num√©ro SIREN pour les organisations officielles

Vous pourrez ensuite acc√©der √† votre tableau de bord pour g√©rer vos √©v√©nements.`,
        success: true
      };
    }
    
    if (lowerMessage.includes('aide') || lowerMessage.includes('help') || lowerMessage.includes('bonjour') || lowerMessage.includes('salut')) {
      return {
        message: `Bonjour ! Je suis votre assistant SportPool üëã

Je peux vous aider avec :
‚Ä¢ La cr√©ation d'√©v√©nements sportifs
‚Ä¢ L'organisation du covoiturage
‚Ä¢ L'inscription et gestion des participants  
‚Ä¢ La navigation sur la plateforme

Posez-moi une question sp√©cifique et je vous guiderai !`,
        success: true
      };
    }
    
    // R√©ponse g√©n√©rique
    return {
      message: `Je comprends votre question sur "${userMessage}".

Voici les principales fonctionnalit√©s de SportPool :
‚Ä¢ **Cr√©er des √©v√©nements** sportifs ponctuels ou r√©currents
‚Ä¢ **Organiser le covoiturage** avec gestion automatique des places  
‚Ä¢ **Inviter des participants** par email
‚Ä¢ **Suivre les statistiques** en temps r√©el

Pour plus d'aide sp√©cifique, n'h√©sitez pas √† reformuler votre question ou contactez le support.`,
      success: true
    };
  }

  async getEventSuggestions(query: string): Promise<ChatbotResponse> {
    const prompt = `
      L'utilisateur cherche des suggestions d'√©v√©nements avec cette requ√™te : "${query}"
      
      Donne des suggestions cr√©atives et pertinentes d'√©v√©nements sportifs ou associatifs.
      Inclus des d√©tails comme le type d'activit√©, la dur√©e sugg√©r√©e, et des conseils pratiques.
      Limite ta r√©ponse √† 3-4 suggestions maximum.
    `;

    return this.sendMessage(prompt);
  }

  async getOrganizationHelp(query: string, organizationType: string): Promise<ChatbotResponse> {
    const prompt = `
      L'utilisateur a une question concernant la gestion de son organisation de type "${organizationType}".
      Sa question : "${query}"
      
      Fournis une r√©ponse adapt√©e √† ce type d'organisation, avec des conseils pratiques
      pour utiliser la plateforme efficacement.
    `;

    return this.sendMessage(prompt);
  }
}

export const chatbotService = new ChatbotService();
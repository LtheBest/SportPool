name: SportPool CI/CD Pipeline

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

env:
  NODE_VERSION: '18'
  REGISTRY: docker.io
  IMAGE_NAME: lthebest/sportpool

jobs:
  # Job 1: Tests et vérifications qualité (CI)
  ci:
    name: 🔍 Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🧹 Code quality checks
      run: |
        echo "🔍 Running ESLint..."
        npm run lint
        echo "💅 Checking code formatting..."
        npm run format:check
        echo "🔍 Running TypeScript check..."
        npm run check

    - name: 🏗️ Build application
      run: npm run build

    - name: 🧪 Run unit tests
      run: npm run test
      env:
        CI: true

    - name: 🎭 Install Playwright
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: npm run playwright:install

    - name: 🧪 Run E2E tests
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: npm run test:e2e
      env:
        CI: true

    - name: 📊 Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          coverage/
        retention-days: 7

    - name: 📦 Upload build artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          client/dist/
        retention-days: 1

  # Job 2: Build et push Docker image (uniquement sur main)
  docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 3: Déploiement Vercel (uniquement sur main)
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🏗️ Build for production
      run: npm run build

    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'

  # Job 4: Déploiement VPS Docker (uniquement sur main)
  deploy-vps:
    name: 🖥️ Deploy to VPS
    runs-on: ubuntu-latest
    needs: [ci, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: 📂 Copy files to server
      run: |
        # Créer le répertoire sur le serveur s'il n'existe pas
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p /home/${{ secrets.SERVER_USER }}/sportpool"
        
        # Copier les fichiers de configuration
        scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/sportpool/
        scp -o StrictHostKeyChecking=no nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/sportpool/
        
        # Créer le fichier .env sur le serveur
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cat > /home/${{ secrets.SERVER_USER }}/sportpool/.env << 'EOF'
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
        SENDGRID_FROM_EMAIL=${{ secrets.SENDGRID_FROM_EMAIL }}
        EOF"

    - name: 🐳 Deploy with Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /home/${{ secrets.SERVER_USER }}/sportpool
          
          # Arrêter les containers existants
          docker-compose down || true
          
          # Supprimer les images obsolètes
          docker image prune -f
          
          # Tirer la nouvelle image
          docker pull ${{ env.IMAGE_NAME }}:latest
          
          # Démarrer les nouveaux containers
          docker-compose up -d --build
          
          # Vérifier le statut
          docker-compose ps
          
          # Attendre que l'application soit prête
          sleep 30
          
          # Test de santé de l'application
          curl -f http://localhost/api/health || echo "Health check failed"
        EOF

    - name: 📊 Deployment status
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🌐 Application should be available at: http://${{ secrets.SERVER_HOST }}"

  # Job 5: Notification de statut
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [ci, docker, deploy-vercel, deploy-vps]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Check deployment status
      run: |
        if [[ "${{ needs.ci.result }}" == "success" && "${{ needs.deploy-vercel.result }}" == "success" && "${{ needs.deploy-vps.result }}" == "success" ]]; then
          echo "STATUS=success" >> $GITHUB_ENV
          echo "MESSAGE=🎉 SportPool deployed successfully to all environments!" >> $GITHUB_ENV
        else
          echo "STATUS=failure" >> $GITHUB_ENV
          echo "MESSAGE=❌ SportPool deployment failed. Check the logs for details." >> $GITHUB_ENV
        fi

    - name: 📝 Create deployment summary
      run: |
        echo "## 🚀 SportPool Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ env.STATUS }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **CI Tests:** ${{ needs.ci.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 **Docker Build:** ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Vercel Deploy:** ${{ needs.deploy-vercel.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🖥️ **VPS Deploy:** ${{ needs.deploy-vps.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ env.MESSAGE }}" >> $GITHUB_STEP_SUMMARY